module alu_manual_tester
(
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4],
    output led[8]
) {
    const SLOW_CLOCK_SIZE = 11
    // Declare it here instead of being passed as a variable
    // For some reason it'll throw up an error if passed from alchitry_top
    const CLK_FREQ = $is_sim() ? 1000 : 1000
    
    enum Testing {
        NOT_YET,
        TESTING,
        COMPLETED
    }
    
    enum Focus {
        A,
        B,
        OUT,
        MISC
    }
    
    enum Change {
        IDLE,
        ADD,
        WAITING_TO_ADD,
        SUBTRACT,
        WAITING_TO_SUBTRACT,
        FOCUS_A,
        FOCUS_B,
        FOCUS_OUT,
        FOCUS_MISC
    }
    
    enum Counter {
        IDLE,
        CAPTURE,
        CAPTURED
    }
    
    alu alu(#SIZE(32))
    signed_bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    .clk(clk) {
        edge_detector io_button_edge[5](#RISE({1, 1, 1, 1, 1}), #FALL({0, 0, 0, 0, 0}))
        edge_detector slow_clock_edge(#RISE(1), #FALL(0))
        button_conditioner io_button_cond[5](#CLK_FREQ({CLK_FREQ, CLK_FREQ, CLK_FREQ, CLK_FREQ, CLK_FREQ}))
        .rst(rst) {
            dff testing[$width(Testing)](#INIT(Testing.NOT_YET))
            dff focus[$width(Focus)](#INIT(Focus.MISC))
            dff change[$width(Change)](#INIT(Change.IDLE))
            dff a_dff[32](#INIT(1))
            dff b_dff[32](#INIT(2))
            dff alu_out_dff[32]
            dff alufn_dff[6]
            dff delta[16]
            dff current_test[8]
            dff completed_test
            dff failed_test
            dff counter[SLOW_CLOCK_SIZE]
            dff counter_state[$width(Counter)](#INIT(Counter.IDLE))
            dff speed_pointer[$clog2(SLOW_CLOCK_SIZE)](#INIT($is_sim() ? 0 : SLOW_CLOCK_SIZE - 1))
            alu_fsm_tester alu_fsm_tester
            multi_seven_seg seg(#DIV($is_sim() ? 1 : 19))
        } 
    }
    
    sig slow_clock
    
    always {
        // Feedback loop for dff
        testing.d = testing.q
        focus.d = focus.q
        change.d = change.q
        a_dff.d = a_dff.q
        b_dff.d = b_dff.q
        alufn_dff.d = alufn_dff.q
        current_test.d = current_test.q
        completed_test.d = completed_test.q
        failed_test.d = failed_test.q
        speed_pointer.d = speed_pointer.q
        counter_state.d = counter_state.q
        
        // Slow clock
        counter.d = counter.q + 1
        
        // Select which bit to use as slow clock
        slow_clock = counter.q[speed_pointer.q]
        
        // Use slow clock edge to proceed with test
        slow_clock_edge.in = slow_clock
        
        // io_dip assignment
        alufn_dff.d = io_dip[0][5:0] // 6 for automatic add/sub, 7 for test start
        delta.d[7:0] = io_dip[1]
        delta.d[15:8] = io_dip[2]
        
        // ALU I/O
        alu.a = a_dff.q 
        alu.b = b_dff.q
        alu.alufn = alufn_dff.q
        alu_out_dff.d = alu.out
        // This implements the 111110 ALUFN rng function
        case (counter_state.q) {
            Counter.IDLE:
                if (alufn_dff.q == 6b111110)
                    counter_state.d = Counter.CAPTURE
            Counter.CAPTURE:
                counter.d = counter.q
                alu_out_dff.d = counter.q[9:0] // Decimal renderer can only accept 10 bits
                counter_state.d = Counter.CAPTURED
            Counter.CAPTURED:
                alu_out_dff.d = alu_out_dff.q
                if (alufn_dff.q != 6b111110) 
                    counter_state.d =Counter.IDLE
        }
        
        // Condition the io buttons, then take **rising** edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        case(change.q) {
            Change.IDLE:
                if (io_button_edge.out[0]) { // Top
                    change.d = Change.ADD
                } else if (io_button_edge.out[2]) { // Bot
                    change.d = Change.SUBTRACT
                } else if (io_button_edge.out[4]) { // Right
                    change.d = Change.FOCUS_A
                } else if (io_button_edge.out[1]) { // Mid
                    change.d = Change.FOCUS_B
                } else if (io_button_edge.out[3]) { // Left
                    // Toggle between displaying alu.out or misc (z, v, n, alufn, test results)
                    if (focus.q == Focus.OUT) {
                        change.d = Change.FOCUS_MISC                    
                    } else {
                        change.d = Change.FOCUS_OUT
                    }
                }
            Change.ADD:
                case(focus.q) {
                    Focus.A:
                        a_dff.d = $signed(a_dff.q) + $resize($signed(delta.q), 32)
                    Focus.B:
                        b_dff.d = $signed(b_dff.q) + $resize($signed(delta.q), 32)
                }
                case(io_dip[0][6]) {
                    0:
                        change.d = Change.IDLE
                    1:
                        change.d = Change.WAITING_TO_ADD
                }
            Change.WAITING_TO_ADD:
                change.d = slow_clock_edge.out ? Change.ADD : Change.WAITING_TO_ADD
            Change.SUBTRACT:
                case(focus.q) {
                    Focus.A:
                        a_dff.d = $signed(a_dff.q) - $resize($signed(delta.q), 32)
                    Focus.B:
                        b_dff.d = $signed(b_dff.q) - $resize($signed(delta.q), 32)
                }
                case(io_dip[0][6]) {
                    0:
                        change.d = Change.IDLE
                    1:
                        change.d = Change.WAITING_TO_SUBTRACT
                }
            Change.WAITING_TO_SUBTRACT:
                change.d = slow_clock_edge.out ? Change.SUBTRACT : Change.WAITING_TO_SUBTRACT
            Change.FOCUS_A:
                focus.d = Focus.A
                change.d = Change.IDLE
            Change.FOCUS_B:
                focus.d = Focus.B
                change.d = Change.IDLE
            Change.FOCUS_OUT:
                focus.d = Focus.OUT
                change.d = Change.IDLE
            Change.FOCUS_MISC:
                focus.d = Focus.MISC
                change.d = Change.IDLE
        }       
        
        // Display
        led = 0
        io_led = 3x{{8b0}}
        decimal_renderer.value = 123
        case(focus.q) {
            Focus.A:
                led = a_dff.q[7:0]
                io_led[0] = a_dff.q[15:8]
                io_led[1] = a_dff.q[23:16]
                io_led[2] = a_dff.q[31:24]
                decimal_renderer.value = a_dff.q[9:0]
            Focus.B:
                led = b_dff.q[7:0]
                io_led[0] = b_dff.q[15:8]
                io_led[1] = b_dff.q[23:16]
                io_led[2] = b_dff.q[31:24]
                decimal_renderer.value = b_dff.q[9:0]
            Focus.OUT:
                led = alu_out_dff.q[7:0]
                io_led[0] = alu_out_dff.q[15:8]
                io_led[1] = alu_out_dff.q[23:16]
                io_led[2] = alu_out_dff.q[31:24]
                decimal_renderer.value = alu_out_dff.q[9:0]
            Focus.MISC:
                led[0] = alu.z
                led[1] = alu.v
                led[2] = alu.n
                io_led[0] = alufn_dff.q
                io_led[1] = alu_fsm_tester.current_test
                io_led[2][0] = alu_fsm_tester.completed
                io_led[2][1] = alu_fsm_tester.failed
                io_led[2][3:2] = testing.q
                decimal_renderer.value = alu_out_dff.q[9:0]
        }
        seg.values = decimal_renderer.digits
        io_select = ~seg.sel
        io_segment = ~seg.seg
        
        // Decide if alu_fsm_tester will take over alu for testing
        alu_fsm_tester.start = 0
        alu_fsm_tester.alu_out = alu.out
        alu_fsm_tester.z = alu.z
        alu_fsm_tester.v = alu.v 
        alu_fsm_tester.n = alu.n 
        case(testing.q) {
            Testing.NOT_YET: // Activate io_dip[0][7] to enter testing phase
                testing.d = io_dip[0][7] ? Testing.TESTING : testing.q
            Testing.TESTING: 
                // Surrenders alu and io_dip[0][7] to alu_fsm_tester
                // Turn io_dip[0][7] back to 0 to simulate error
                alu_fsm_tester.start = io_dip[0][7]
                alu.a = alu_fsm_tester.a
                alu.b = alu_fsm_tester.b
                alu.alufn = alu_fsm_tester.alufn
                
                // Diagnostic purposes. These dffs are used to display on led and io_led
                // They also continuously feed the values into alu even after testing is completed.
                a_dff.d = alu_fsm_tester.a
                b_dff.d = alu_fsm_tester.b
                alufn_dff.d = alu_fsm_tester.alufn
                
                // Complete test
                testing.d = alu_fsm_tester.completed ? Testing.COMPLETED : testing.q
            Testing.COMPLETED:
                // Preserve alufn as it is affected by io_dip while others arent.
                alufn_dff.d = alufn_dff.q
        }
    }
}