module alu #(
    SIZE = 32 : SIZE > 1
)(
    input clk,  // clock
    input rst,  // reset
    input a[SIZE],
    input b[SIZE],
    input alufn[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    adder adder(#SIZE(SIZE))
    compare compare
    boolean boolean(#SIZE(SIZE))
    shifter shifter(#SIZE(SIZE))
    multiplier multiplier(#SIZE(SIZE))
    mux_2 mux_2[SIZE]
    mux_4 mux_4[SIZE]
    
    .clk(clk) {
        .rst(rst) {
            dff signed_counter[10](#INIT(10b1000000000))
        }
    }
        
    always {
        // Used to generate a "random" number between -512 and 511 (both inc.)
        signed_counter.d = signed_counter.q + 1
        
        adder.a = a
        adder.b = b
        adder.alufn_signal = alufn
        
        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn
        
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        shifter.a = a
        shifter.b = b[4:0]
        shifter.alufn = alufn
        
        multiplier.a = a
        multiplier.b = b      
        
        repeat(i, SIZE, 0, 1) {
            mux_2.in[i][0] = adder.out[i]
            mux_2.in[i][1] = multiplier.mul[i]
        }
        mux_2.s0 = SIZEx{alufn[1]}
        
        repeat(i, SIZE, 0, 1) {
            mux_4.in[i][0] = mux_2.out[i]
            mux_4.in[i][1] = boolean.bool[i]
            mux_4.in[i][2] = shifter.shift[i]
            mux_4.in[i][3] = 0
        }
        mux_4.in[0][3] = compare.cmp
        mux_4.s0 = SIZEx{alufn[4]}
        mux_4.s1 = SIZEx{alufn[5]}
        
        out =  mux_4.out
        
        if (alufn == 6b111111) {
            out = a / b
        } else if (alufn == 6b111110) {
            signed_counter.d = signed_counter.q
            out = signed_counter.q
        }
        
        z = adder.z
        v = adder.v
        n = adder.n  
    }
}