module signed_bin_to_dec #(
    // Parameters are not needed but i just copied them here so i can switch b/w signed and unsigned easily
    DIGITS ~ 4 : DIGITS > 0 && DIGITS < 20,          
    LEADING_ZEROS = 0 : LEADING_ZEROS == 0 || LEADING_ZEROS == 1
)(
    input value[10],
    output digits[4][4]
) {
    sig absolute_value[10]
    sig remainders[3][10]
    
    always {
        absolute_value = value[9] ? ~value + 1 : value
        digits[3] = value[9] ? 4hF: 4hE // Minus sign or not lit up
        remainders = 3x{{absolute_value}}
        // Hundreds
        if (remainders[2] < 100) {
            digits[2] = 0
            remainders[1] = remainders[2]
        } else if (remainders[2] - 100 < 100) {
            digits[2] = 1
            remainders[1] = remainders[2] - 100
        } else if (remainders[2] - 200 < 100) {
            digits[2] = 2
            remainders[1] = remainders[2] - 200
        } else if (remainders[2] - 300 < 100) {
            digits[2] = 3
            remainders[1] = remainders[2] - 300
        } else if (remainders[2] - 400 < 100) {
            digits[2] = 4
            remainders[1] = remainders[2] - 400
        } else {
            digits[2] = 5
            remainders[1] = remainders[2] - 500
        }
        
        // Tens
        if (remainders[1] < 10) {
            digits[1] = 0
            remainders[0] = remainders[1]
        } else if (remainders[1] - 10 < 10) {
            digits[1] = 1
            remainders[0] = remainders[1] - 10
        } else if (remainders[1] - 20 < 10) {
            digits[1] = 2
            remainders[0] = remainders[1] - 20
        } else if (remainders[1] - 30 < 10) {
            digits[1] = 3
            remainders[0] = remainders[1] - 30
        } else if (remainders[1] - 40 < 10) {
            digits[1] = 4
            remainders[0] = remainders[1] - 40
        } else if (remainders[1] - 50 < 10) {
            digits[1] = 5
            remainders[0] = remainders[1] - 50
        } else if (remainders[1] - 60 < 10) {
            digits[1] = 6
            remainders[0] = remainders[1] - 60
        } else if (remainders[1] - 70 < 10) {
            digits[1] = 7
            remainders[0] = remainders[1] - 70
        } else if (remainders[1] - 80 < 10) {
            digits[1] = 8
            remainders[0] = remainders[1] - 80
        } else {
            digits[1] = 9
            remainders[0] = remainders[1] - 90
        }
        
        // Ones
        digits[0] = remainders[0]
    }
}